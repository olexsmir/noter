basePath: /api/v1/
definitions:
  domain.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.response:
    properties:
      message:
        type: string
    type: object
  v1.userRefreshTokensInput:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  v1.userSignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  v1.userSignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8000
info:
  contact: {}
  description: REST API for Noter
  title: Noter API
  version: "1.0"
paths:
  /auth/logout:
    post:
      consumes:
      - application/json
      description: user logout
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - user-auth: []
      summary: User logout
      tags:
      - user-auth
  /auth/refresh-tokens:
    post:
      consumes:
      - application/json
      description: user refresh tokens
      parameters:
      - description: sign up info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.userRefreshTokensInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.response'
      summary: User Refresh Tokens
      tags:
      - user-auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: user sign in
      parameters:
      - description: sign up info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.userSignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.response'
      summary: User SignIn
      tags:
      - user-auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create user account
      parameters:
      - description: sign up info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.userSignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/v1.response'
      summary: User SignUp
      tags:
      - user-auth
securityDefinitions:
  UserAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
