// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/flof-ik/noter/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsers) Create(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), user)
}

// GetByCredentials mocks base method.
func (m *MockUsers) GetByCredentials(email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUsersMockRecorder) GetByCredentials(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUsers)(nil).GetByCredentials), email, password)
}

// GetByRefreshToken mocks base method.
func (m *MockUsers) GetByRefreshToken(refreshToken string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefreshToken", refreshToken)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefreshToken indicates an expected call of GetByRefreshToken.
func (mr *MockUsersMockRecorder) GetByRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefreshToken", reflect.TypeOf((*MockUsers)(nil).GetByRefreshToken), refreshToken)
}

// RemoveSession mocks base method.
func (m *MockUsers) RemoveSession(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockUsersMockRecorder) RemoveSession(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockUsers)(nil).RemoveSession), userID)
}

// SetSession mocks base method.
func (m *MockUsers) SetSession(session domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockUsersMockRecorder) SetSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockUsers)(nil).SetSession), session)
}

// MockNotes is a mock of Notes interface.
type MockNotes struct {
	ctrl     *gomock.Controller
	recorder *MockNotesMockRecorder
}

// MockNotesMockRecorder is the mock recorder for MockNotes.
type MockNotesMockRecorder struct {
	mock *MockNotes
}

// NewMockNotes creates a new mock instance.
func NewMockNotes(ctrl *gomock.Controller) *MockNotes {
	mock := &MockNotes{ctrl: ctrl}
	mock.recorder = &MockNotesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotes) EXPECT() *MockNotesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotes) Create(note domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotesMockRecorder) Create(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotes)(nil).Create), note)
}

// Delete mocks base method.
func (m *MockNotes) Delete(id, authorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotesMockRecorder) Delete(id, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotes)(nil).Delete), id, authorID)
}

// DeleteAll mocks base method.
func (m *MockNotes) DeleteAll(notebookID, authorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", notebookID, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockNotesMockRecorder) DeleteAll(notebookID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockNotes)(nil).DeleteAll), notebookID, authorID)
}

// GetAll mocks base method.
func (m *MockNotes) GetAll(authorID, notebookID, pageNumber int) ([]domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", authorID, notebookID, pageNumber)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNotesMockRecorder) GetAll(authorID, notebookID, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNotes)(nil).GetAll), authorID, notebookID, pageNumber)
}

// GetByID mocks base method.
func (m *MockNotes) GetByID(id int) (domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotesMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotes)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockNotes) Update(id, authorID, notebookID int, inp domain.UpdateNoteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, authorID, notebookID, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotesMockRecorder) Update(id, authorID, notebookID, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotes)(nil).Update), id, authorID, notebookID, inp)
}

// MockNotebooks is a mock of Notebooks interface.
type MockNotebooks struct {
	ctrl     *gomock.Controller
	recorder *MockNotebooksMockRecorder
}

// MockNotebooksMockRecorder is the mock recorder for MockNotebooks.
type MockNotebooksMockRecorder struct {
	mock *MockNotebooks
}

// NewMockNotebooks creates a new mock instance.
func NewMockNotebooks(ctrl *gomock.Controller) *MockNotebooks {
	mock := &MockNotebooks{ctrl: ctrl}
	mock.recorder = &MockNotebooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotebooks) EXPECT() *MockNotebooksMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotebooks) Create(notebook domain.Notebook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notebook)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotebooksMockRecorder) Create(notebook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotebooks)(nil).Create), notebook)
}

// Delete mocks base method.
func (m *MockNotebooks) Delete(id, authorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotebooksMockRecorder) Delete(id, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotebooks)(nil).Delete), id, authorID)
}

// GetAll mocks base method.
func (m *MockNotebooks) GetAll(authorID, pageNumber int) ([]domain.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", authorID, pageNumber)
	ret0, _ := ret[0].([]domain.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNotebooksMockRecorder) GetAll(authorID, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNotebooks)(nil).GetAll), authorID, pageNumber)
}

// GetById mocks base method.
func (m *MockNotebooks) GetById(id, authorID int) (domain.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, authorID)
	ret0, _ := ret[0].(domain.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockNotebooksMockRecorder) GetById(id, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockNotebooks)(nil).GetById), id, authorID)
}

// Update mocks base method.
func (m *MockNotebooks) Update(id, authorID int, inp domain.UpdateNotebookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, authorID, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotebooksMockRecorder) Update(id, authorID, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotebooks)(nil).Update), id, authorID, inp)
}
